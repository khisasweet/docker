
docker images
docker pull ubuntu:latest
docker run --name test -it ubuntu:latest bash

#attach your shell to a running container.
docker attach test
#Exit the container again by typing Ctrl-PQ and verify your shell prompt reverts to your local machine.

#Delete the container
#Run another docker ps to verify your container is still running. Stop and kill the container using the docker stop and docker rm commands.

docker stop test

docker rm test
docker ps -a

### how to clone an app from GitHub, containerize it using Docker, and run it as a container.
############################################

# Execute the following commands once the terminal loads:
git clone https://github.com/nigelpoulton/psweb
cd psweb
ls -l
cat Dockerfile
docker build -t test:latest .
docker images
docker run -d --name web1 --publish 8080:8080 test:latest

# Use the following commands to clean up
docker rm web1 -f
docker rmi test:latest
############################################

docker images --digests alpine
### If we want to find an image’s digest before pulling it, we can use the docker buildx imagetools command.

$ docker buildx imagetools inspect nigelpoulton/k8sbook:latest

# You will get a similar output
Name:      docker.io/nigelpoulton/k8sbook:latest
MediaType: application/vnd.docker.distribution.manifest.list.v2+json
Digest:    sha256:13dd59a0c74e9a147800039b1ff4d61201375c008b96a29c5bd17244bce2e14b
<Snip>

#Pulling an image using the digest#
docker pull nigelpoulton/k8sbook@sha256:13dd59a0...bce2e14b

### It’s also possible to directly query the registry API for image data, including digest. The following curl command queries Docker Hub for the digest of the same image.
$ curl https://hub.docker.com/v2/repositories/nigelpoulton/k8sbook/tags/?name=latest | jq '.results[].digest'

#...
"sha256:13dd59a0c74e9a147800039b1ff4d61201375c008b96a29c5bd17244bce2e14b"

### Run the following command to see the different architectures supported behind the alpine:latest tag:
docker buildx imagetools inspect alpine

##### delete docker image #####
docker rmi $(docker images -q) -f

Summary of the Docker image commands

Let’s revise some of the commands we’ve used.

    docker pull is the command to download images from remote registries. It defaults to Docker Hub but works with other registries. The docker pull alpine:latest command will pull the image tagged as latest from the alpine repository on Docker Hub.

    docker images lists all of the images in our Docker host’s local repository (image cache). We can add the --digests flag to see the SHA256 hashes.

    docker inspect gives us a wealth of image-related metadata in a nicely formatted view.

    docker manifest inspect lets us inspect the manifest list of images stored in registries. The docker manifest inspect ghcr.io/regclient/regctl command will show the manifest list for the regctl image on the GitHub Container Registry (GHCR).

    docker buildx is a Docker CLI plugin that works with Docker’s latest build engine features. We learned how to use the imagetools sub-command to query manifest-related data from images.

    docker scout is a Docker CLI plugin that integrates with the Docker Scout backend to perform image vulnerability scanning. It scans images, provides reports on vulnerabilities, and even suggests remediation actions.

    docker rmi is the command used to delete images. It removes all layer data stored on the local filesystem. However, images associated with containers in running (up) or stopped (exited) states cannot be deleted.


#### Starting a Container

$ docker run -d --name webserver -p 5005:8080 nigelpoulton/ddd-book:web0.1



    The docker run instructs Docker to run a new container.

    The -d flag tells Docker to run it in the background as a daemon process and detach from the local terminal.

    The --name flag tells Docker to name this container webserver.

    The -p 5005:8080 flag maps port 5005 on the local system to port 8080 inside the container. This works because the container’s web server is listening on port 8080.

    The nigelpoulton/ddd-book:web0.1 argument tells Docker which image to use to start the container.

#############################
Once it has a local copy of the image, the daemon makes a request to containerd asking for a new container. containerd then instructs runc to create the container and start the app. It also performs the port mapping.
###########
docker exec -it webserver sh
docker inspect webserver
docker inspect nigelpoulton/ddd-book:web0.1
docker exec webserver cat views/home.pug
docker rm webserver -f

###########

# For your reference, these are the commands you need to run in the terminal.

docker exec -it webserver sh
# Starts an interactive shell session in the running 'webserver' container

vi views/home.pug
# Opens the 'home.pug' file located in the 'views' directory using the 'vi' text editor

docker ps
# Lists all currently running Docker containers

docker stop webserver
# Stops the running 'webserver' container

docker restart webserver
# Restarts the 'webserver' container

docker rm webserver -f
# Forcefully removes the 'webserver' container, even if it’s running

docker ps -a
# Lists all containers, including both running and stopped ones

#######


docker run --name ddd-ctr -it ubuntu:24.04 bash

root@d3c892ad0eb3:/# exit

# Check the status of the exited process
$ docker ps -a

CONTAINER ID   IMAGE          COMMAND   STATUS                  NAMES
d3c892ad0eb3   ubuntu:24.04   "bash"    Exited (0) 3 secs ago   ddd-ctr
########################################
